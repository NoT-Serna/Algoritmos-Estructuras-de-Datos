-Binary Search: 
  -Time Complexity: O(log n), where n is the number of elements in the array. It divides the array in half at each step.
  x comparisons = 2x-1 where x belongs to the range [1, logN] because maximum comparisons = maximum time N can be halved = maximum comparisons to reach 1st element = logN.
  - Space Complexity: O(1), which means it requires a constant amount of extra space regardless of the size of the input array.

- Index Search:
  - Time Complexity: O(1): If you have an array and you're searching for an element by its index, the complexity is O(1). This is because you can directly access any element in an array in constant time. If you are using hash table the complexity may be O(n) due to
  collisions
  - Space Complexity: O(n)


- HeapSort:
  - Building the heap: O(n) - Building a heap from an array of n elements takes linear time.
    Heapify each element: O(log n) - After removing the maximum/minimum element from the heap, the heap property needs to be restored. This operation takes logarithmic time in the worst case.
    Total time complexity: O(n log n) - Since heapify is performed n times, each taking O(log n) time.

  - O(1) - Heap sort is an in-place sorting algorithm, meaning it sorts the array without requiring additional space proportional to the input size, apart from a constant amount of extra space for temporary variables or function call stack.


- QuickSort:
- Best case: O(n log n) - This occurs when the partition process divides the array into two nearly equal-sized sub-arrays.
  Average case: O(n log n) - On average, quicksort performs at O(n log n), making it one of the fastest sorting algorithms.
  Worst case: O(n^2) - This occurs when the partition process consistently picks either the smallest or largest element as the pivot, resulting in one sub-array with n - 1 elements and the other with 0 elements. However, this worst-case scenario is rare and can be mitigated by selecting the pivot smartly (e.g., using randomization or median-of-three).

- Has a space complexity of O(log n) due to the recursive calls made during sorting. This represents the space required for the call stack during the recursive partitioning process.

- Insert Sort:
  Best case: O(n) - This occurs when the array is already sorted, and each element only needs to be compared with its preceding element.
  Average case: O(n^2) - On average, each element may need to be compared with approximately half of the elements in the sorted subarray.
  Worst case: O(n^2) - This occurs when the array is sorted in reverse order, and each element must be compared with every element in the sorted subarray.

- Select Sort: O(n^2)
